/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package texteditorfinal;

import java.awt.Color;
import javax.swing.JColorChooser;
import javax.swing.JOptionPane;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.StringTokenizer;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JTextArea;
import javax.swing.KeyStroke;
import javax.swing.UIManager;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.Document;
import javax.swing.undo.CannotRedoException;
import javax.swing.undo.CannotUndoException;
import javax.swing.undo.UndoManager;

/**
 *
 * @author Nahid Reza
 */
public class NewPane extends javax.swing.JFrame {
    /**
     * Variable declaration(Manual)
     */
    FontHelper font;
    String filename;
    String fileContent;
    private Document editorPaneDocument;
    protected UndoHandler undoHandler=new UndoHandler();
    protected UndoManager undoManager=new UndoManager();
    private UndoAction undoAction=null;
    private RedoAction redoAction=null;
    boolean cutHappened=false;
    boolean copyHappened=false;
    boolean saveHappened=false;
    //public static NewPane frMain=new NewPane();//End of manually declared variables
    
    /**
     * Creates new form NewPane
     */
    public NewPane() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("Text Editor");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PopUp_Edit = new javax.swing.JPopupMenu();
        PopUp_All = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        PopUp_Cut = new javax.swing.JMenuItem();
        PopUp_Copy = new javax.swing.JMenuItem();
        PopUp_Paste = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        PopUp_Undo = new javax.swing.JMenuItem();
        PopUp_Redo = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        Menu_File = new javax.swing.JMenu();
        File_New = new javax.swing.JMenuItem();
        File_Open = new javax.swing.JMenuItem();
        File_Save = new javax.swing.JMenuItem();
        Menu_Edit = new javax.swing.JMenu();
        Edit_All = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        Edit_Cut = new javax.swing.JMenuItem();
        Edit_Copy = new javax.swing.JMenuItem();
        Edit_Paste = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        Edit_Undo = new javax.swing.JMenuItem(undoAction);
        Edit_Redo = new javax.swing.JMenuItem(redoAction);
        Menu_Format = new javax.swing.JMenu();
        Format_Font = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        Format_Color = new javax.swing.JMenuItem();
        Format_Background = new javax.swing.JMenuItem();
        Menu_Lookup = new javax.swing.JMenu();
        Lookup_Find = new javax.swing.JMenuItem();
        Lookup_Replace = new javax.swing.JMenuItem();

        PopUp_Edit.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        PopUp_Edit.setFocusTraversalPolicyProvider(true);
        PopUp_Edit.setLabel("");

        PopUp_All.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        PopUp_All.setText("Select All");
        PopUp_All.setEnabled(false);
        PopUp_All.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PopUp_AllActionPerformed(evt);
            }
        });
        PopUp_Edit.add(PopUp_All);
        PopUp_Edit.add(jSeparator4);

        PopUp_Cut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        PopUp_Cut.setText("Cut");
        PopUp_Cut.setEnabled(false);
        PopUp_Cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PopUp_CutActionPerformed(evt);
            }
        });
        PopUp_Edit.add(PopUp_Cut);

        PopUp_Copy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        PopUp_Copy.setText("Copy");
        PopUp_Copy.setEnabled(false);
        PopUp_Copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PopUp_CopyActionPerformed(evt);
            }
        });
        PopUp_Edit.add(PopUp_Copy);

        PopUp_Paste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        PopUp_Paste.setText("Paste");
        PopUp_Paste.setEnabled(false);
        PopUp_Paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PopUp_PasteActionPerformed(evt);
            }
        });
        PopUp_Edit.add(PopUp_Paste);
        PopUp_Edit.add(jSeparator5);

        PopUp_Undo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        PopUp_Undo.setText("Undo");
        PopUp_Undo.setEnabled(false);
        PopUp_Undo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PopUp_UndoActionPerformed(evt);
            }
        });
        PopUp_Edit.add(PopUp_Undo);

        PopUp_Redo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        PopUp_Redo.setText("Redo");
        PopUp_Redo.setEnabled(false);
        PopUp_Redo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PopUp_RedoActionPerformed(evt);
            }
        });
        PopUp_Edit.add(PopUp_Redo);

        PopUp_Edit.getAccessibleContext().setAccessibleParent(TextArea);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        TextArea.setColumns(20);
        TextArea.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        TextArea.setRows(5);
        TextArea.setBorder(null);
        TextArea.setInheritsPopupMenu(true);
        TextArea.setMargin(new java.awt.Insets(0, 0, 0, 0));
        TextArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TextAreaMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                TextAreaMouseReleased(evt);
            }
        });
        TextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TextAreaKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(TextArea);
        KeyStroke undoKeystroke=KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK);
        KeyStroke redoKeystroke=KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK);

        undoAction=new UndoAction();
        TextArea.getInputMap().put(undoKeystroke,"undoKeystroke");
        TextArea.getActionMap().put("undoKeystroke",undoAction);

        redoAction=new RedoAction();
        TextArea.getInputMap().put(redoKeystroke,"redoKeystroke");
        TextArea.getActionMap().put("redoKeystroke",redoAction);

        jMenuBar1.setOpaque(false);

        Menu_File.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/File.png"))); // NOI18N
        Menu_File.setToolTipText("File");
        Menu_File.setPreferredSize(new java.awt.Dimension(43, 35));
        Menu_File.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Menu_FileMouseEntered(evt);
            }
        });

        File_New.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        File_New.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/New.png"))); // NOI18N
        File_New.setText("New");
        File_New.setToolTipText("");
        File_New.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                File_NewActionPerformed(evt);
            }
        });
        Menu_File.add(File_New);

        File_Open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        File_Open.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Open.png"))); // NOI18N
        File_Open.setText("Open");
        File_Open.setToolTipText("");
        File_Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                File_OpenActionPerformed(evt);
            }
        });
        Menu_File.add(File_Open);
        editorPaneDocument=TextArea.getDocument();
        editorPaneDocument.addUndoableEditListener(undoHandler);

        File_Save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        File_Save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/save.png"))); // NOI18N
        File_Save.setText("Save");
        File_Save.setToolTipText("");
        File_Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                File_SaveActionPerformed(evt);
            }
        });
        Menu_File.add(File_Save);

        jMenuBar1.add(Menu_File);

        Menu_Edit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Edit.png"))); // NOI18N
        Menu_Edit.setToolTipText("Edit");
        Menu_Edit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Menu_EditMouseEntered(evt);
            }
        });

        Edit_All.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        Edit_All.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/All.png"))); // NOI18N
        Edit_All.setText("Select All");
        Edit_All.setToolTipText("");
        Edit_All.setEnabled(false);
        Edit_All.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Edit_AllActionPerformed(evt);
            }
        });
        Menu_Edit.add(Edit_All);
        Menu_Edit.add(jSeparator1);

        Edit_Cut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        Edit_Cut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Cut icon.png"))); // NOI18N
        Edit_Cut.setText("Cut");
        Edit_Cut.setToolTipText("");
        Edit_Cut.setEnabled(false);
        Edit_Cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Edit_CutActionPerformed(evt);
            }
        });
        Menu_Edit.add(Edit_Cut);

        Edit_Copy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        Edit_Copy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Copy.png"))); // NOI18N
        Edit_Copy.setText("Copy");
        Edit_Copy.setToolTipText("");
        Edit_Copy.setEnabled(false);
        Edit_Copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Edit_CopyActionPerformed(evt);
            }
        });
        Menu_Edit.add(Edit_Copy);

        Edit_Paste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        Edit_Paste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Paste.png"))); // NOI18N
        Edit_Paste.setText("Paste");
        Edit_Paste.setToolTipText("");
        Edit_Paste.setEnabled(false);
        Edit_Paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Edit_PasteActionPerformed(evt);
            }
        });
        Menu_Edit.add(Edit_Paste);
        Menu_Edit.add(jSeparator2);

        Edit_Undo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        Edit_Undo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Undo.png"))); // NOI18N
        Edit_Undo.setText("Undo");
        Edit_Undo.setToolTipText("");
        Edit_Undo.setEnabled(false);
        Edit_Undo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Edit_UndoActionPerformed(evt);
            }
        });
        Menu_Edit.add(Edit_Undo);

        Edit_Redo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        Edit_Redo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/redo.png"))); // NOI18N
        Edit_Redo.setText("Redo");
        Edit_Redo.setToolTipText("");
        Edit_Redo.setEnabled(false);
        Edit_Redo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Edit_RedoActionPerformed(evt);
            }
        });
        Menu_Edit.add(Edit_Redo);

        jMenuBar1.add(Menu_Edit);

        Menu_Format.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Format.png"))); // NOI18N
        Menu_Format.setToolTipText("Format");
        Menu_Format.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Menu_FormatMouseEntered(evt);
            }
        });

        font=new FontHelper(null);
        Format_Font.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Font.png"))); // NOI18N
        Format_Font.setText("Font");
        Format_Font.setToolTipText("");
        Format_Font.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Format_FontActionPerformed(evt);
            }
        });
        font.getOk().addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextArea.setFont(font.font());
                font.setVisible(false);
            }
        });
        font.getCancel().addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                font.setVisible(false);
            }
        });
        Menu_Format.add(Format_Font);
        Menu_Format.add(jSeparator3);

        Format_Color.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Color.png"))); // NOI18N
        Format_Color.setText("Font Color");
        Format_Color.setToolTipText("");
        Format_Color.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Format_ColorActionPerformed(evt);
            }
        });
        Menu_Format.add(Format_Color);

        Format_Background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background.png"))); // NOI18N
        Format_Background.setText("Background");
        Format_Background.setToolTipText("");
        Format_Background.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Format_BackgroundActionPerformed(evt);
            }
        });
        Menu_Format.add(Format_Background);

        jMenuBar1.add(Menu_Format);

        Menu_Lookup.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/lookup.png"))); // NOI18N
        Menu_Lookup.setToolTipText("Lookup");
        Menu_Lookup.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Menu_LookupMouseEntered(evt);
            }
        });

        Lookup_Find.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Find.png"))); // NOI18N
        Lookup_Find.setText("Find");
        Lookup_Find.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Lookup_FindActionPerformed(evt);
            }
        });
        Menu_Lookup.add(Lookup_Find);

        Lookup_Replace.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Replace.png"))); // NOI18N
        Lookup_Replace.setText("Replace");
        Lookup_Replace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Lookup_ReplaceActionPerformed(evt);
            }
        });
        Menu_Lookup.add(Lookup_Replace);

        jMenuBar1.add(Menu_Lookup);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 842, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*
    *Automatically generated events 
    */
    private void File_NewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_File_NewActionPerformed
        open_new();
    }//GEN-LAST:event_File_NewActionPerformed

    private void File_OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_File_OpenActionPerformed
        clear_field();
    }//GEN-LAST:event_File_OpenActionPerformed

    private void Menu_FileMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Menu_FileMouseEntered
        Menu_File.doClick();
    }//GEN-LAST:event_Menu_FileMouseEntered

    private void Menu_EditMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Menu_EditMouseEntered
        Menu_Edit.doClick();
        if(!TextArea.getText().equals("")){
            Edit_All.setEnabled(true);
            if(TextArea.getSelectedText() != null){
                Edit_Cut.setEnabled(true);
                Edit_Copy.setEnabled(true);
            }
            else if(copyHappened==true || cutHappened==true){
                Edit_Paste.setEnabled(true);
            }
            else{
                Edit_Cut.setEnabled(false);
                Edit_Copy.setEnabled(false);
                Edit_Paste.setEnabled(false);
            }
        }
        else if(copyHappened==true || cutHappened==true){
            Edit_Paste.setEnabled(true);
            Edit_All.setEnabled(false);
            Edit_Cut.setEnabled(false);
            Edit_Copy.setEnabled(false);
        }
        else{
            Edit_All.setEnabled(false);
            Edit_Cut.setEnabled(false);
            Edit_Copy.setEnabled(false);
        }
    }//GEN-LAST:event_Menu_EditMouseEntered

    private void Edit_PasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Edit_PasteActionPerformed
        try {
            TextArea.paste();
            cutHappened=false;
        } catch (Exception e) {
        }
        
    }//GEN-LAST:event_Edit_PasteActionPerformed

    private void Format_ColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Format_ColorActionPerformed
        JColorChooser cc=new JColorChooser();
        Color c = JColorChooser.showDialog(null,"Text Color",TextArea.getForeground());
        if(c!=null){
            TextArea.setForeground(c);
        }
    }//GEN-LAST:event_Format_ColorActionPerformed

    private void Format_FontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Format_FontActionPerformed
        font.setLocationRelativeTo(this);
        font.setVisible(true);
    }//GEN-LAST:event_Format_FontActionPerformed

    private void Menu_FormatMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Menu_FormatMouseEntered
        Menu_Format.doClick();
    }//GEN-LAST:event_Menu_FormatMouseEntered

    private void File_SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_File_SaveActionPerformed
        save();
    }//GEN-LAST:event_File_SaveActionPerformed

    private void Edit_AllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Edit_AllActionPerformed
        try {
            TextArea.selectAll();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_Edit_AllActionPerformed

    private void Edit_CutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Edit_CutActionPerformed
        try {
            if(TextArea.getSelectedText() != null){
                TextArea.cut();
                cutHappened=true;
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_Edit_CutActionPerformed

    private void Edit_CopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Edit_CopyActionPerformed
        try {
            if(TextArea.getSelectedText() != null){
                TextArea.copy();
                copyHappened=true;
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_Edit_CopyActionPerformed

    private void Edit_RedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Edit_RedoActionPerformed
        try {
            if(undoManager.canRedo()){
                undoManager.redo();
            }
            } catch (CannotRedoException ex) {
                ex.printStackTrace();
            }
            redoAction.update();
            undoAction.update();
    }//GEN-LAST:event_Edit_RedoActionPerformed

    private void Edit_UndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Edit_UndoActionPerformed
            try {
                if(undoManager.canUndo() && !TextArea.getText().equals(fileContent)){
                    undoManager.undo();
                }
            } catch (CannotUndoException ex) {
                ex.printStackTrace();
            }
            undoAction.update();
            redoAction.update();
    }//GEN-LAST:event_Edit_UndoActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (!TextArea.getText().equals("") && !TextArea.getText().equals(fileContent)) {
            int x = JOptionPane.showConfirmDialog(null,
                    "Save the file before exit?", "Confirm Exit!",
                    JOptionPane.YES_NO_CANCEL_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                save();
                if(saveHappened==true){
                    setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                }
                else{
                    setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                }
            } else if (x == JOptionPane.NO_OPTION) {
                setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            } else {
                setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
            }
        }
        else{
            setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        }
    }//GEN-LAST:event_formWindowClosing

    private void TextAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextAreaKeyTyped
        saveHappened=false;
    }//GEN-LAST:event_TextAreaKeyTyped

    private void Format_BackgroundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Format_BackgroundActionPerformed
        JColorChooser cc=new JColorChooser();
        Color c = JColorChooser.showDialog(null,"Text Color",Color.WHITE);
        if(c!=null){
            TextArea.setBackground(c);
        }
    }//GEN-LAST:event_Format_BackgroundActionPerformed

    private void Menu_LookupMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Menu_LookupMouseEntered
        Menu_Lookup.doClick();
    }//GEN-LAST:event_Menu_LookupMouseEntered

    private void Lookup_FindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Lookup_FindActionPerformed
        TextArea.setText(TextArea.getText()+" ");
        new FindAndReplace(null, false);
    }//GEN-LAST:event_Lookup_FindActionPerformed

    private void Lookup_ReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Lookup_ReplaceActionPerformed
        TextArea.setText(TextArea.getText()+" ");
        new FindAndReplace(null, true);
    }//GEN-LAST:event_Lookup_ReplaceActionPerformed

    private void TextAreaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TextAreaMouseReleased
        
        if(evt.isPopupTrigger()){
            PopUp_Edit.show(TextArea, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_TextAreaMouseReleased

    private void PopUp_AllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PopUp_AllActionPerformed
        Edit_AllActionPerformed(evt);
    }//GEN-LAST:event_PopUp_AllActionPerformed

    private void PopUp_CutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PopUp_CutActionPerformed
        Edit_CutActionPerformed(evt);
    }//GEN-LAST:event_PopUp_CutActionPerformed

    private void PopUp_CopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PopUp_CopyActionPerformed
        Edit_CopyActionPerformed(evt);
    }//GEN-LAST:event_PopUp_CopyActionPerformed

    private void PopUp_PasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PopUp_PasteActionPerformed
        Edit_PasteActionPerformed(evt);
    }//GEN-LAST:event_PopUp_PasteActionPerformed

    private void PopUp_UndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PopUp_UndoActionPerformed
        Edit_UndoActionPerformed(evt);
    }//GEN-LAST:event_PopUp_UndoActionPerformed

    private void PopUp_RedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PopUp_RedoActionPerformed
        Edit_RedoActionPerformed(evt);
    }//GEN-LAST:event_PopUp_RedoActionPerformed

    private void TextAreaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TextAreaMousePressed
        if(!TextArea.getText().equals("")){
            PopUp_All.setEnabled(true);
            if(TextArea.getSelectedText() != null){
                PopUp_Cut.setEnabled(true);
                PopUp_Copy.setEnabled(true);
            }
            else if(copyHappened==true || cutHappened==true){
                PopUp_Paste.setEnabled(true);
            }
            else{
                PopUp_Cut.setEnabled(false);
                PopUp_Copy.setEnabled(false);
                PopUp_Paste.setEnabled(false);
            }
        }
        else if(copyHappened==true || cutHappened==true){
            PopUp_Paste.setEnabled(true);
            PopUp_All.setEnabled(false);
            PopUp_Cut.setEnabled(false);
            PopUp_Copy.setEnabled(false);
        }
        else{
            PopUp_All.setEnabled(false);
            PopUp_Cut.setEnabled(false);
            PopUp_Copy.setEnabled(false);
        }
    }//GEN-LAST:event_TextAreaMousePressed
    
    /*
    *Manually written functionns
    */
    public void save(){
        PrintWriter fout=null;
        int retval= -1;
        JFileChooser fc=new JFileChooser("D:");
        fc.setMultiSelectionEnabled(false);
        fc.removeChoosableFileFilter(fc.getAcceptAllFileFilter());
        fc.setFileFilter(new FileNameExtensionFilter("Files ending in .txt", "txt"));
        try {
            if(filename==null){
                retval=fc.showSaveDialog(this);
                if(retval==JFileChooser.APPROVE_OPTION){
                    File file=fc.getSelectedFile();
                    FileFilter ff=fc.getFileFilter();
                    if (ff instanceof FileNameExtensionFilter && ! ff.accept(file)) {
                        FileNameExtensionFilter fileNameExtensionFilter = (FileNameExtensionFilter) ff;
                        String extension = fileNameExtensionFilter.getExtensions()[0];

                        String newName = file.getName() + "." + extension;
                        file = new File(file.getParent(), newName);
                    }
                    fout=new PrintWriter(new FileWriter(file));
                    String s=TextArea.getText();
                    StringTokenizer st=new StringTokenizer(s,System.getProperty("line.separator"));
                    while(st.hasMoreElements()){
                        fout.println(st.nextToken());
                    }
                    JOptionPane.showMessageDialog(rootPane, "File Saved");
                    filename=file.getAbsolutePath();
                    setTitle(file.getName());
                    fileContent=TextArea.getText();
                    saveHappened=true;
                }
            }
            else{
                fout=new PrintWriter(new FileWriter(filename));
                String s=TextArea.getText();
                StringTokenizer st=new StringTokenizer(s,System.getProperty("line.separator"));
                while(st.hasMoreElements()){
                    fout.println(st.nextToken());
                }
                JOptionPane.showMessageDialog(rootPane, "File Saved");
                fileContent=TextArea.getText();
            }
        } catch (IOException e) {
        } finally{
            if(fout!=null){
                fout.close();    
            }
        }
    }
    
    public void clear_field(){
        int option=-1;
        if(!TextArea.getText().equals("")){
            if(!TextArea.getText().equals(fileContent)){
                option=JOptionPane.showConfirmDialog(rootPane, "Do you want to save the changes?");
                if(option==JOptionPane.YES_OPTION){
                    save();
                    open();
                }
                else if(option==JOptionPane.NO_OPTION){
                    open();
                }
                else{
                    
                }
            }
            else{
                open();
            }
        }
        else{
            open();
        }
    }
    public void open(){
        JFileChooser fc=new JFileChooser("D:");
        fc.setMultiSelectionEnabled(false);
        fc.removeChoosableFileFilter(fc.getAcceptAllFileFilter());
        fc.setFileFilter(new FileNameExtensionFilter("Files ending in .txt", "txt"));
        try {
            int retval=fc.showOpenDialog(this);
            if(retval==JFileChooser.APPROVE_OPTION){
                TextArea.setText("");
                File file=fc.getSelectedFile();
                Reader in=new FileReader(file);
                char[] buff=new char[100000000];
                int n;
                while((n=in.read(buff, 0, buff.length))!=-1){
                    TextArea.append(new String(buff,0,n));
                }
                filename=file.getAbsolutePath();
                setTitle(file.getName());
                fileContent=TextArea.getText();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public void open_new(){
    int option=-1;
        if(!TextArea.getText().equals("")){
            if(!TextArea.getText().equals(fileContent)){
                option=JOptionPane.showConfirmDialog(rootPane, "Do you want to save the changes?");
                if(option==JOptionPane.YES_OPTION){
                    save();
                }
                else if(option==JOptionPane.NO_OPTION){
                    new NewPane().setVisible(true);
                    this.dispose();
                }
                else{
                }
            }
            else{
                new NewPane().setVisible(true);
                this.dispose();
            }
        }
        else{
            new NewPane().setVisible(true);
            this.dispose();
        }
    }
    class UndoHandler implements UndoableEditListener{
        @Override
        public void undoableEditHappened(UndoableEditEvent e){
                undoManager.addEdit(e.getEdit());
                undoAction.update();
                redoAction.update();
        }
    }
    class UndoAction extends AbstractAction{
        public UndoAction(){
            super("Undo");
            Edit_Undo.setEnabled(false);
            PopUp_Undo.setEnabled(false);
        }
        public void actionPerformed(ActionEvent e){
            try {
                if(undoManager.canUndo() && !TextArea.getText().equals(fileContent)){
                    undoManager.undo();
                }
            } catch (CannotUndoException ex) {
                ex.printStackTrace();
            }
            update();
            redoAction.update();
        }
        protected void update(){
            if(undoManager.canUndo() && !TextArea.getText().equals(fileContent)){
                Edit_Undo.setEnabled(true);
                PopUp_Undo.setEnabled(true);
                putValue(Action.NAME, undoManager.getUndoPresentationName());
            }
            else{
                Edit_Undo.setEnabled(false);
                PopUp_Undo.setEnabled(false);
                putValue(Action.NAME, "Undo");
            }
        }
    }
    class RedoAction extends AbstractAction{
        public RedoAction(){
            super("Redo");
            Edit_Redo.setEnabled(false);
            PopUp_Redo.setEnabled(false);
        }
        public void actionPerformed(ActionEvent e){
            try {
                if(undoManager.canRedo()){
                undoManager.redo();
                }
            } catch (CannotRedoException ex) {
                ex.printStackTrace();
            }
            update();
            undoAction.update();
        }
        protected void update(){
            if(undoManager.canRedo()){
                Edit_Redo.setEnabled(true);
                PopUp_Redo.setEnabled(true);
                putValue(Action.NAME, undoManager.getRedoPresentationName());
            }
            else{
                Edit_Redo.setEnabled(false);
                PopUp_Redo.setEnabled(false);
                putValue(Action.NAME, "Redo");
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewPane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewPane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewPane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewPane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewPane().setVisible(true);
            }
        });
    }

    public static JTextArea getArea(){
        return TextArea;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Edit_All;
    private javax.swing.JMenuItem Edit_Copy;
    private javax.swing.JMenuItem Edit_Cut;
    private javax.swing.JMenuItem Edit_Paste;
    private javax.swing.JMenuItem Edit_Redo;
    private javax.swing.JMenuItem Edit_Undo;
    private javax.swing.JMenuItem File_New;
    private javax.swing.JMenuItem File_Open;
    private javax.swing.JMenuItem File_Save;
    private javax.swing.JMenuItem Format_Background;
    private javax.swing.JMenuItem Format_Color;
    private javax.swing.JMenuItem Format_Font;
    private javax.swing.JMenuItem Lookup_Find;
    private javax.swing.JMenuItem Lookup_Replace;
    private javax.swing.JMenu Menu_Edit;
    private javax.swing.JMenu Menu_File;
    private javax.swing.JMenu Menu_Format;
    private javax.swing.JMenu Menu_Lookup;
    private javax.swing.JMenuItem PopUp_All;
    private javax.swing.JMenuItem PopUp_Copy;
    private javax.swing.JMenuItem PopUp_Cut;
    private javax.swing.JPopupMenu PopUp_Edit;
    private javax.swing.JMenuItem PopUp_Paste;
    private javax.swing.JMenuItem PopUp_Redo;
    private javax.swing.JMenuItem PopUp_Undo;
    static javax.swing.JTextArea TextArea;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    // End of variables declaration//GEN-END:variables
}
